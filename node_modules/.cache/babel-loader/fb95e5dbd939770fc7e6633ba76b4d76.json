{"ast":null,"code":"import _objectSpread from \"/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/src/forms/EditUserForm.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EditUserForm = props => {\n  const _useState = useState(props.currentUser),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  useEffect(() => {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setUser(_objectSpread({}, user, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: user.name,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Username\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    value: user.username,\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Update user\"), React.createElement(\"button\", {\n    onClick: () => props.setEditing(false),\n    className: \"button muted-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Cancel\"));\n};\n\nexport default EditUserForm;","map":{"version":3,"sources":["/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","username","setEditing"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA,oBACFH,QAAQ,CAACG,KAAK,CAACC,WAAP,CADN;AAAA;AAAA,QACpBC,IADoB;AAAA,QACdC,OADc;;AAG5BL,EAAAA,SAAS,CACP,MAAM;AACJK,IAAAA,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP;AACD,GAHM,EAIP,CAAED,KAAF,CAJO,CAAT,CAH4B,CAS5B;;AAEA,QAAMI,iBAAiB,GAAGC,KAAK,IAAI;AAAA,0BACTA,KAAK,CAACC,MADG;AAAA,UACzBC,IADyB,iBACzBA,IADyB;AAAA,UACnBC,KADmB,iBACnBA,KADmB;AAGjCL,IAAAA,OAAO,mBAAMD,IAAN;AAAY,OAACK,IAAD,GAAQC;AAApB,OAAP;AACD,GAJD;;AAMA,SACE;AACE,IAAA,QAAQ,EAAEH,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACI,cAAN;AAEAT,MAAAA,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,EAA0BT,IAA1B;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAEA,IAAI,CAACK,IAA3C;AAAiD,IAAA,QAAQ,EAAEH,iBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,EAUE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,UAAxB;AAAmC,IAAA,KAAK,EAAEF,IAAI,CAACU,QAA/C;AAAyD,IAAA,QAAQ,EAAER,iBAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXF,EAYE;AAAQ,IAAA,OAAO,EAAE,MAAMJ,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,IAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,CADF;AAkBD,CAnCD;;AAqCA,eAAed,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n"]},"metadata":{},"sourceType":"module"}