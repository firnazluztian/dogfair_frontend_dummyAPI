{"ast":null,"code":"import _slicedToArray from \"/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$1, useEffect as useEffect$1, useRef as useRef$1, isValidElement, cloneElement, Fragment } from 'react';\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst RADIO_INPUT = 'radio';\nconst FILE_INPUT = 'file';\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  const ref = field.ref;\n\n  if (ref.addEventListener) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (REGEX_IS_DEEP_PROP.test(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = type => type === RADIO_INPUT;\n\nvar isCheckBoxInput = type => type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const ref = field.ref,\n        _field$ref = field.ref,\n        name = _field$ref.name,\n        type = _field$ref.type,\n        mutationWatcher = field.mutationWatcher;\n\n  if (!type) {\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\n    const options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          const mutationWatcher = ref.mutationWatcher;\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = type => type === FILE_INPUT;\n\nvar isMultipleSelect = type => type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const _options$0$ref = options[0].ref,\n          checked = _options$0$ref.checked,\n          value = _options$0$ref.value,\n          attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const type = ref.type,\n        name = ref.name,\n        options = ref.options,\n        value = ref.value,\n        files = ref.files;\n  const field = fields[name];\n\n  if (isFileInput(type)) {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) {\n    return getMultipleSelectValue(options);\n  }\n\n  if (isCheckBoxInput(type)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar getFieldsValues = fields => Object.values(fields).reduce((previous, {\n  ref,\n  ref: {\n    name\n  }\n}) => Object.assign(Object.assign({}, previous), {\n  [name]: getFieldValue(fields, ref)\n}), {});\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError.type, currentFieldError.message);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isString = value => typeof value === 'string';\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\n  const isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    const message = isStringValue ? result : '';\n    return {\n      type,\n      message,\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name,\n    valueAsNumber,\n    valueAsDate\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(type);\n  const isCheckBox = isCheckBoxInput(type);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const message = isString(required) ? required : getValueAndMessage(required).message;\n    error[name] = Object.assign({\n      type: INPUT_VALIDATION_RULES.required,\n      message,\n      ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n    }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n\n    const _getValueAndMessage = getValueAndMessage(max),\n          maxValue = _getValueAndMessage.value,\n          maxMessage = _getValueAndMessage.message;\n\n    const _getValueAndMessage2 = getValueAndMessage(min),\n          minValue = _getValueAndMessage2.value,\n          minMessage = _getValueAndMessage2.message;\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const _getValueAndMessage3 = getValueAndMessage(maxLength),\n          maxLengthValue = _getValueAndMessage3.value,\n          maxLengthMessage = _getValueAndMessage3.message;\n\n    const _getValueAndMessage4 = getValueAndMessage(minLength),\n          minLengthValue = _getValueAndMessage4.value,\n          minLengthMessage = _getValueAndMessage4.message;\n\n    const inputLength = value.toString().length;\n    const exceedMax = maxLength && inputLength > maxLengthValue;\n    const exceedMin = minLength && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const _getValueAndMessage5 = getValueAndMessage(pattern),\n          patternValue = _getValueAndMessage5.value,\n          patternMessage = _getValueAndMessage5.message;\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      const validateFunctions = Object.entries(validate);\n      const validationResult = await new Promise(resolve => {\n        validateFunctions.reduce(async (previous, [key, validate], index) => {\n          if (!isEmptyObject((await previous)) && !validateAllFieldCriteria || !isFunction(validate)) {\n            return resolve(previous);\n          }\n\n          let result;\n          const validateResult = await validate(fieldValue);\n          const validateError = getValidateError(validateResult, validateRef, key);\n\n          if (validateError) {\n            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              error[name] = result;\n            }\n          } else {\n            result = previous;\n          }\n\n          return validateFunctions.length - 1 === index ? resolve(result) : result;\n        }, {});\n      });\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  let value;\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    watchFields.add(fieldName);\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst omitObject = (obj, key) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _a = key,\n        omitted = obj[_a],\n        rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\n\n  return rest;\n};\n\nconst unsetObject = target => {\n  for (const key in target) {\n    const data = target[key];\n    const isArrayObject = isArray(data);\n\n    if ((isObject(data) || isArrayObject) && !data.ref) {\n      unsetObject(data);\n    }\n\n    if (isUndefined(data) || isEmptyObject(data) || isArrayObject && !target[key].filter(Boolean).length) {\n      delete target[key];\n    }\n  }\n\n  return target;\n};\n\nconst unset = (target, paths) => {\n  paths.forEach(path => {\n    set(target, path, undefined);\n  });\n  return unsetObject(target);\n};\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst useRef = React.useRef,\n      useState = React.useState,\n      useCallback = React.useCallback,\n      useEffect = React.useEffect;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const fieldArrayNamesRef = useRef(new Set());\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        render = _useState2[1];\n\n  const _useRef$current = useRef(modeChecker(mode)).current,\n        isOnBlur = _useRef$current.isOnBlur,\n        isOnSubmit = _useRef$current.isOnSubmit;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb && 'Proxy' in window;\n  const readFormState = useRef({\n    dirty: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n        isReValidateOnBlur = _useRef$current2.isOnBlur,\n        isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  defaultValuesRef.current = defaultValuesRef.current ? defaultValuesRef.current : defaultValues;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const validateFieldCurry = useCallback(validateField.bind(null, fieldsRef, validateAllFieldCriteria), []);\n  const validateFieldsSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validateAllFieldCriteria), [validationSchema]);\n  const renderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, validationSchema]);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const ref = field.ref;\n    const type = ref.type;\n    const options = field.options;\n    const value = isWeb && ref instanceof window.HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(type)) {\n      if (value instanceof FileList) {\n        ref.files = value;\n      }\n    } else if (isMultipleSelect(type)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(type) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name]) {\n      return false;\n    }\n\n    const isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n    const isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = !!dirtyFieldsRef.current.size;\n    return isDirtyChanged && readFormState.current.dirty;\n  };\n\n  const setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !get(touchedFieldsRef.current, name) && readFormState.current.touched) {\n      return !!set(touchedFieldsRef.current, name, true);\n    }\n  }, [setFieldValue]);\n  const executeValidation = useCallback(async (name, shouldRender, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    renderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [reRender, renderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async (payload, shouldRender) => {\n    const _ref = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fieldsRef.current))),\n          errors = _ref.errors;\n\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        if (errors[name]) {\n          set(errorsRef.current, name, errors[name]);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      const fieldName = payload;\n      const error = get(errors, fieldName) ? {\n        [fieldName]: get(errors, fieldName)\n      } : {};\n      renderBaseOnError(fieldName, error, shouldRender || previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, renderBaseOnError, validateAllFieldCriteria, validationSchema]);\n  const triggerValidation = useCallback(async (payload, shouldRender) => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (validationSchema) {\n      return executeSchemaValidation(fields, shouldRender);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, false, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields, shouldRender);\n  }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\n  const setValue = useCallback((name, value, shouldValidate) => {\n    const shouldRender = setInternalValue(name, value) || isWatchAllRef.current || watchFieldsRef.current.has(name);\n\n    if (shouldValidate) {\n      return triggerValidation(name, shouldRender);\n    }\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = errors[name];\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current.has(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormState.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (validationSchema) {\n      const _ref2 = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fields))),\n            errors = _ref2.errors;\n\n      const validForm = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (isValidRef.current !== validForm) {\n        shouldUpdateState = true;\n      }\n\n      isValidRef.current = validForm;\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!renderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback(() => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateFieldsSchemaCurry(transformToNestObject(fieldValues)).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid && previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, [reRender, validateFieldsSchemaCurry]);\n  const resetFieldRef = useCallback(name => {\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    fieldsRef.current = omitObject(fieldsRef.current, name);\n    defaultRenderValuesRef.current = omitObject(defaultRenderValuesRef.current, name);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormState.current.isValid || readFormState.current.touched) {\n      reRender();\n    }\n\n    if (validationSchema) {\n      validateSchemaIsValid();\n    }\n  }, [reRender]);\n  const removeEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field) {\n      return;\n    }\n\n    if (!isUndefined(handleChangeRef.current)) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n\n    resetFieldRef(field.ref.name);\n  }, [resetFieldRef]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      (isArray(name) ? name : [name]).forEach(fieldName => errorsRef.current = omitObject(errorsRef.current, fieldName));\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], type, message)) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormState.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        let value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValuesRef.current;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name && process.env.NODE_ENV !== 'production') {\n      return console.warn('Missing name @', ref);\n    }\n\n    const name = ref.name,\n          type = ref.type,\n          value = ref.value;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\n    let currentField = fields[name];\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\n\n      if (isRadioOrCheckbox) {\n        currentField = Object.assign({\n          options: [...(currentField && currentField.options || []), {\n            ref,\n            mutationWatcher\n          }],\n          ref: {\n            type,\n            name\n          }\n        }, validateOptions);\n      } else {\n        currentField = Object.assign(Object.assign({}, fieldAttributes), {\n          mutationWatcher\n        });\n      }\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      const defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      const shouldSet = [...fieldArrayNamesRef.current].reduce((prev, current) => isMatchFieldArrayName(name, current) ? false : prev, true);\n\n      if (!isUndefined(defaultValue) && shouldSet) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (validationSchema && readFormState.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormState.current.isValid) {\n        validateFieldCurry(currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name]) {\n      defaultRenderValuesRef.current[name] = getFieldValue(fields, currentField.ref);\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined || !refOrValidationOptions) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors;\n    let fieldValues;\n    const fields = fieldsRef.current;\n\n    if (readFormState.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (validationSchema) {\n        fieldValues = getFieldsValues(fields);\n\n        const _ref3 = await validateFieldsSchemaCurry(transformToNestObject(fieldValues)),\n              errors = _ref3.errors,\n              values = _ref3.values;\n\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        const _ref4 = await Object.values(fields).reduce(async (previous, field) => {\n          if (!field) {\n            return previous;\n          }\n\n          const resolvedPrevious = await previous;\n          const ref = field.ref,\n                name = field.ref.name;\n\n          if (!fields[name]) {\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          const fieldError = await validateFieldCurry(field);\n\n          if (fieldError[name]) {\n            set(resolvedPrevious.errors, name, fieldError[name]);\n            validFieldsRef.current.delete(name);\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          if (fieldsWithValidationRef.current.has(name)) {\n            validFieldsRef.current.add(name);\n          }\n\n          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n          return Promise.resolve(resolvedPrevious);\n        }, Promise.resolve({\n          errors: {},\n          values: {}\n        })),\n              errors = _ref4.errors,\n              values = _ref4.values;\n\n        fieldErrors = errors;\n        fieldValues = values;\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError) {\n          for (const key in fieldsRef.current) {\n            if (get(fieldErrors, key)) {\n              const field = fieldsRef.current[key];\n\n              if (field) {\n                if (field.ref.focus) {\n                  field.ref.focus();\n                  break;\n                } else if (field.options) {\n                  field.options[0].ref.focus();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [reRender, submitFocusError, validateFieldCurry, validateFieldsSchemaCurry, validationSchema]);\n\n  const resetRefs = () => {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    touchedFieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    fieldArrayNamesRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  const reset = values => {\n    for (const value of Object.values(fieldsRef.current)) {\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    resetRefs();\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray(defaultValuesRef.current));\n    reRender();\n  };\n\n  const getValues = payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  };\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeEventListenerAndRef(field, true));\n  }, [removeEventListenerAndRef]);\n\n  if (!validationSchema) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isEmptyObject(fieldsRef.current) || isValidRef.current\n  };\n  const control = {\n    register,\n    unregister,\n    setValue,\n    formState,\n    defaultValues,\n    mode: {\n      isOnBlur,\n      isOnSubmit\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errors: errorsRef.current,\n    fields: fieldsRef.current,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef\n  };\n  return {\n    watch,\n    control,\n    handleSubmit,\n    setValue,\n    triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, [reRender]),\n    register: useCallback(register, [defaultRenderValuesRef.current, defaultValuesRef.current]),\n    unregister: useCallback(unregister, [removeEventListenerAndRef]),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormState.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = value => Object.assign(Object.assign({}, value), value.id ? {} : {\n  id: generateId()\n});\n\nconst mapIds = data => (isArray(data) ? data : []).map(value => appendId(value));\n\nfunction useFieldArray({\n  control,\n  name\n}) {\n  const methods = useFormContext();\n\n  const _ref5 = control || methods.control,\n        resetFieldArrayFunctionRef = _ref5.resetFieldArrayFunctionRef,\n        fieldArrayNamesRef = _ref5.fieldArrayNamesRef,\n        globalFields = _ref5.fields,\n        defaultValues = _ref5.defaultValues,\n        unregister = _ref5.unregister;\n\n  const _useState$ = useState$1(mapIds(defaultValues[name])),\n        _useState$2 = _slicedToArray(_useState$, 2),\n        fields = _useState$2[0],\n        setField = _useState$2[1];\n\n  const resetFields = () => {\n    for (const key in globalFields) {\n      if (isMatchFieldArrayName(key, name)) {\n        unregister(key);\n      }\n    }\n  };\n\n  const prepend = value => {\n    resetFields();\n    setField([appendId(value), ...fields]);\n  };\n\n  const append = value => setField([...fields, appendId(value)]);\n\n  const remove = index => {\n    resetFields();\n    setField(isUndefined(index) ? [] : [...fields.slice(0, index), ...fields.slice(index + 1)]);\n  };\n\n  const insert = (index, value) => {\n    resetFields();\n    setField([...fields.slice(0, index), appendId(value), ...fields.slice(index)]);\n  };\n\n  const swap = (indexA, indexB) => {\n    resetFields();\n    var _ref6 = [fields[indexB], fields[indexA]];\n    fields[indexA] = _ref6[0];\n    fields[indexB] = _ref6[1];\n    setField([...fields]);\n  };\n\n  const move = (from, to) => {\n    resetFields();\n    fields.splice(to, 0, fields.splice(from, 1)[0]);\n    setField([...fields]);\n  };\n\n  const reset = values => setField(mapIds(values[name]));\n\n  useEffect$1(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return () => {\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [name]);\n  return {\n    swap,\n    move,\n    prepend,\n    append,\n    remove,\n    insert,\n    fields\n  };\n}\n\nvar getInputValue = (target, isCheckbox) => {\n  if (isNullOrUndefined(target)) {\n    return target;\n  }\n\n  return isCheckbox ? isUndefined(target.checked) ? target : target.checked : isUndefined(target.value) ? target : target.value;\n};\n\nconst Controller = _a => {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onChange\", \"onBlur\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\n\n  const methods = useFormContext();\n\n  const _ref7 = control || methods.control,\n        defaultValues = _ref7.defaultValues,\n        setValue = _ref7.setValue,\n        register = _ref7.register,\n        unregister = _ref7.unregister,\n        errors = _ref7.errors,\n        _ref7$mode = _ref7.mode,\n        isOnSubmit = _ref7$mode.isOnSubmit,\n        isOnBlur = _ref7$mode.isOnBlur,\n        _ref7$reValidateMode = _ref7.reValidateMode,\n        isReValidateOnBlur = _ref7$reValidateMode.isReValidateOnBlur,\n        isReValidateOnSubmit = _ref7$reValidateMode.isReValidateOnSubmit,\n        isSubmitted = _ref7.formState.isSubmitted,\n        fields = _ref7.fields;\n\n  const _useState$3 = useState$1(isUndefined(defaultValue) ? defaultValues[name] : defaultValue),\n        _useState$4 = _slicedToArray(_useState$3, 2),\n        value = _useState$4[0],\n        setInputStateValue = _useState$4[1];\n\n  const valueRef = useRef$1(value);\n  const isCheckboxInput = isBoolean(value);\n\n  const shouldValidate = isBlurEvent => !skipValidation({\n    hasError: !!errors[name],\n    isBlurEvent,\n    isOnBlur,\n    isOnSubmit,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = target => {\n    const data = getInputValue(target, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = (event, eventName) => (...arg) => {\n    const data = commonTask(event(arg));\n    const isBlurEvent = eventName === EVENTS.BLUR;\n    setValue(name, data, shouldValidate(isBlurEvent));\n  };\n\n  const handleChange = e => {\n    const data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate());\n  };\n\n  const handleBlur = e => {\n    const data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate(true));\n  };\n\n  const registerField = () => register(Object.defineProperty({\n    name\n  }, VALUE, {\n    set(data) {\n      setInputStateValue(data);\n      valueRef.current = data;\n    },\n\n    get() {\n      return valueRef.current;\n    }\n\n  }), Object.assign({}, rules));\n\n  if (!fields[name]) {\n    registerField();\n  }\n\n  useEffect$1(() => {\n    registerField();\n    return () => unregister(name);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [name]);\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange, EVENTS.CHANGE)\n  } : {\n    [onChangeName]: handleChange\n  }), isOnBlur || isReValidateOnBlur ? onBlur ? {\n    [onBlurName]: eventWrapper(onBlur, EVENTS.BLUR)\n  } : {\n    [onBlurName]: handleBlur\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props));\n};\n\nconst ErrorMessage = ({\n  as: InnerComponent,\n  errors,\n  name,\n  children\n}) => {\n  const methods = useFormContext();\n\n  const _get = get(errors || methods.errors, name, {}),\n        message = _get.message,\n        types = _get.types;\n\n  if (!message) {\n    return null;\n  }\n\n  const props = {\n    children: children ? children({\n      message,\n      messages: types\n    }) : message\n  };\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props)) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["/Users/firnazluztian/Documents/react/Oromico/milestone_1 copy/dogfair_frontend/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","createContext","useContext","createElement","useState","useState$1","useEffect","useEffect$1","useRef","useRef$1","isValidElement","cloneElement","Fragment","VALIDATION_MODE","onBlur","onChange","onSubmit","RADIO_INPUT","FILE_INPUT","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","type","isCheckBoxInput","isDetached","element","HTMLElement","nodeType","Node","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","fields","forceDelete","name","mutationWatcher","fieldValue","options","forEach","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","filter","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","getFieldsValues","isEmptyObject","keys","isSameError","error","message","get","obj","defaultValue","split","Boolean","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isString","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","types","validateField","fieldsRef","valueAsNumber","valueAsDate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","parseFloat","valueDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","validationResult","Promise","resolve","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","abortEarly","e","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","isMatchFieldArrayName","searchName","startsWith","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","__rest","s","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","omitObject","_a","omitted","rest","unsetObject","target","isArrayObject","unset","paths","modeChecker","mode","isOnChange","useCallback","useForm","reValidateMode","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","isWeb","isProxyEnabled","readFormState","dirty","submitCount","touched","isSubmitting","reRender","validateFieldCurry","validateFieldsSchemaCurry","renderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","FileList","selectRef","includes","checkboxRef","setDirty","isDirty","isDirtyChanged","size","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","setValue","shouldValidate","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validForm","validateSchemaIsValid","then","resetFieldRef","removeEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","nest","unregister","names","registerFieldsRef","validateOptions","process","env","NODE_ENV","console","warn","fieldAttributes","currentField","find","shouldSet","prev","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","fieldErrors","resolvedPrevious","fieldError","focus","resetRefs","reset","closest","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","id","mapIds","useFieldArray","methods","globalFields","setField","resetFields","prepend","append","remove","slice","insert","swap","indexA","indexB","move","from","to","resetFunctions","fieldArrayNames","getInputValue","isCheckbox","Controller","rules","InnerComponent","as","onChangeName","onBlurName","valueName","setInputStateValue","valueRef","isCheckboxInput","commonTask","eventWrapper","event","eventName","arg","handleBlur","registerField","defineProperty","props","ErrorMessage","messages"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$1, useEffect as useEffect$1, useRef as useRef$1, isValidElement, cloneElement, Fragment } from 'react';\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst RADIO_INPUT = 'radio';\r\nconst FILE_INPUT = 'file';\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (ref.addEventListener) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\r\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (REGEX_IS_DEEP_PROP.test(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (type) => type === RADIO_INPUT;\n\nvar isCheckBoxInput = (type) => type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    const mutationWatcher = ref.mutationWatcher;\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (type) => type === FILE_INPUT;\n\nvar isMultipleSelect = (type) => type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { type, name, options, value, files } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(type)) {\r\n        return files;\r\n    }\r\n    if (isRadioInput(type)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(type)) {\r\n        return getMultipleSelectValue(options);\r\n    }\r\n    if (isCheckBoxInput(type)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar getFieldsValues = (fields) => Object.values(fields).reduce((previous, { ref, ref: { name } }) => (Object.assign(Object.assign({}, previous), { [name]: getFieldValue(fields, ref) })), {});\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isSameError = (error, type, message) => isObject(error) && error.type === type && error.message === message;\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return (currentFieldError &&\r\n        !isSameError(existFieldError, currentFieldError.type, currentFieldError.message));\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isString = (value) => typeof value === 'string';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name, valueAsNumber, valueAsDate }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(type);\r\n    const isCheckBox = isCheckBoxInput(type);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const message = isString(required)\r\n            ? required\r\n            : getValueAndMessage(required).message;\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, { abortEarly: false }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        watchFields.add(fieldName);\r\n        value = fieldValues[fieldName];\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst omitObject = (obj, key) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const _a = key, omitted = obj[_a], rest = __rest(obj, [typeof _a === \"symbol\" ? _a : _a + \"\"]);\r\n    return rest;\r\n};\n\nconst unsetObject = (target) => {\r\n    for (const key in target) {\r\n        const data = target[key];\r\n        const isArrayObject = isArray(data);\r\n        if ((isObject(data) || isArrayObject) && !data.ref) {\r\n            unsetObject(data);\r\n        }\r\n        if (isUndefined(data) ||\r\n            isEmptyObject(data) ||\r\n            (isArrayObject && !target[key].filter(Boolean).length)) {\r\n            delete target[key];\r\n        }\r\n    }\r\n    return target;\r\n};\r\nconst unset = (target, paths) => {\r\n    paths.forEach(path => {\r\n        set(target, path, undefined);\r\n    });\r\n    return unsetObject(target);\r\n};\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormState = useRef({\r\n        dirty: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    defaultValuesRef.current = defaultValuesRef.current\r\n        ? defaultValuesRef.current\r\n        : defaultValues;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const validateFieldCurry = useCallback(validateField.bind(null, fieldsRef, validateAllFieldCriteria), []);\r\n    const validateFieldsSchemaCurry = useCallback(validateWithSchema.bind(null, validationSchema, validateAllFieldCriteria), [validationSchema]);\r\n    const renderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) || validationSchema) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, validationSchema]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const { type } = ref;\r\n        const options = field.options;\r\n        const value = isWeb &&\r\n            ref instanceof window.HTMLElement &&\r\n            isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(type) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(type)) {\r\n            if (value instanceof FileList) {\r\n                ref.files = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(type)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(type) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name]) {\r\n            return false;\r\n        }\r\n        const isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        const isDirtyChanged = dirtyFieldsRef.current.has(name) !== isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = !!dirtyFieldsRef.current.size;\r\n        return isDirtyChanged && readFormState.current.dirty;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) && readFormState.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, shouldRender, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        renderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [reRender, renderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload, shouldRender) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fieldsRef.current)));\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                if (errors[name]) {\r\n                    set(errorsRef.current, name, errors[name]);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            const fieldName = payload;\r\n            const error = (get(errors, fieldName)\r\n                ? { [fieldName]: get(errors, fieldName) }\r\n                : {});\r\n            renderBaseOnError(fieldName, error, shouldRender || previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [reRender, renderBaseOnError, validateAllFieldCriteria, validationSchema]);\r\n    const triggerValidation = useCallback(async (payload, shouldRender) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (validationSchema) {\r\n            return executeSchemaValidation(fields, shouldRender);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, false, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields, shouldRender);\r\n    }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) ||\r\n            isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name);\r\n        if (shouldValidate) {\r\n            return triggerValidation(name, shouldRender);\r\n        }\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = errors[name];\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isWatchAllRef.current ||\r\n                watchFieldsRef.current.has(name) ||\r\n                shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormState.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (validationSchema) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(getFieldsValues(fields)));\r\n                const validForm = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (isValidRef.current !== validForm) {\r\n                    shouldUpdateState = true;\r\n                }\r\n                isValidRef.current = validForm;\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!renderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback(() => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateFieldsSchemaCurry(transformToNestObject(fieldValues)).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid && previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, [reRender, validateFieldsSchemaCurry]);\r\n    const resetFieldRef = useCallback((name) => {\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        fieldsRef.current = omitObject(fieldsRef.current, name);\r\n        defaultRenderValuesRef.current = omitObject(defaultRenderValuesRef.current, name);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormState.current.isValid || readFormState.current.touched) {\r\n            reRender();\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n    }, [reRender]);\r\n    const removeEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field) {\r\n            return;\r\n        }\r\n        if (!isUndefined(handleChangeRef.current)) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n        resetFieldRef(field.ref.name);\r\n    }, [resetFieldRef]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            (isArray(name) ? name : [name]).forEach(fieldName => (errorsRef.current = omitObject(errorsRef.current, fieldName)));\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], type, message)) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormState.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name && process.env.NODE_ENV !== 'production') {\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\r\n        let currentField = fields[name];\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeEventListenerAndRef(fieldAttributes));\r\n            if (isRadioOrCheckbox) {\r\n                currentField = Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions);\r\n            }\r\n            else {\r\n                currentField = Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n            }\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            const defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            const shouldSet = [...fieldArrayNamesRef.current].reduce((prev, current) => isMatchFieldArrayName(name, current) ? false : prev, true);\r\n            if (!isUndefined(defaultValue) && shouldSet) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (validationSchema && readFormState.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormState.current.isValid) {\r\n                validateFieldCurry(currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name]) {\r\n            defaultRenderValuesRef.current[name] = getFieldValue(fields, currentField.ref);\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined || !refOrValidationOptions) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormState.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (validationSchema) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateFieldsSchemaCurry(transformToNestObject(fieldValues));\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateFieldCurry(field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError) {\r\n                    for (const key in fieldsRef.current) {\r\n                        if (get(fieldErrors, key)) {\r\n                            const field = fieldsRef.current[key];\r\n                            if (field) {\r\n                                if (field.ref.focus) {\r\n                                    field.ref.focus();\r\n                                    break;\r\n                                }\r\n                                else if (field.options) {\r\n                                    field.options[0].ref.focus();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        reRender,\r\n        submitFocusError,\r\n        validateFieldCurry,\r\n        validateFieldsSchemaCurry,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        fieldArrayNamesRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        for (const value of Object.values(fieldsRef.current)) {\r\n            if (value && value.ref && value.ref.closest) {\r\n                try {\r\n                    value.ref.closest('form').reset();\r\n                    break;\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }\r\n        resetRefs();\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) &&\r\n            resetFieldArray(defaultValuesRef.current));\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeEventListenerAndRef(field, true));\r\n    }, [removeEventListenerAndRef]);\r\n    if (!validationSchema) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isEmptyObject(fieldsRef.current) || isValidRef.current,\r\n    };\r\n    const control = {\r\n        register,\r\n        unregister,\r\n        setValue,\r\n        formState,\r\n        defaultValues,\r\n        mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        },\r\n        reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        },\r\n        errors: errorsRef.current,\r\n        fields: fieldsRef.current,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayNamesRef,\r\n    };\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, [reRender]),\r\n        register: useCallback(register, [\r\n            defaultRenderValuesRef.current,\r\n            defaultValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, [removeEventListenerAndRef]),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormState.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value) => (Object.assign(Object.assign({}, value), (value.id ? {} : { id: generateId() })));\r\nconst mapIds = (data) => (isArray(data) ? data : []).map(value => appendId(value));\n\nfunction useFieldArray({ control, name }) {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fields: globalFields, defaultValues, unregister, } = control || methods.control;\r\n    const [fields, setField] = useState$1(mapIds(defaultValues[name]));\r\n    const resetFields = () => {\r\n        for (const key in globalFields) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                unregister(key);\r\n            }\r\n        }\r\n    };\r\n    const prepend = (value) => {\r\n        resetFields();\r\n        setField([appendId(value), ...fields]);\r\n    };\r\n    const append = (value) => setField([...fields, appendId(value)]);\r\n    const remove = (index) => {\r\n        resetFields();\r\n        setField(isUndefined(index)\r\n            ? []\r\n            : [...fields.slice(0, index), ...fields.slice(index + 1)]);\r\n    };\r\n    const insert = (index, value) => {\r\n        resetFields();\r\n        setField([\r\n            ...fields.slice(0, index),\r\n            appendId(value),\r\n            ...fields.slice(index),\r\n        ]);\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        resetFields();\r\n        [fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]];\r\n        setField([...fields]);\r\n    };\r\n    const move = (from, to) => {\r\n        resetFields();\r\n        fields.splice(to, 0, fields.splice(from, 1)[0]);\r\n        setField([...fields]);\r\n    };\r\n    const reset = (values) => setField(mapIds(values[name]));\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [name]);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n}\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onChange, onBlur, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onChange\", \"onBlur\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValues, setValue, register, unregister, errors, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fields, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$1(isUndefined(defaultValue) ? defaultValues[name] : defaultValue);\r\n    const valueRef = useRef$1(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = (isBlurEvent) => !skipValidation({\r\n        hasError: !!errors[name],\r\n        isBlurEvent,\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event, eventName) => (...arg) => {\r\n        const data = commonTask(event(arg));\r\n        const isBlurEvent = eventName === EVENTS.BLUR;\r\n        setValue(name, data, shouldValidate(isBlurEvent));\r\n    };\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const handleBlur = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate(true));\r\n    };\r\n    const registerField = () => register(Object.defineProperty({\r\n        name,\r\n    }, VALUE, {\r\n        set(data) {\r\n            setInputStateValue(data);\r\n            valueRef.current = data;\r\n        },\r\n        get() {\r\n            return valueRef.current;\r\n        },\r\n    }), Object.assign({}, rules));\r\n    if (!fields[name]) {\r\n        registerField();\r\n    }\r\n    useEffect$1(() => {\r\n        registerField();\r\n        return () => unregister(name);\r\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [name]);\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange, EVENTS.CHANGE) }\r\n        : { [onChangeName]: handleChange })), (isOnBlur || isReValidateOnBlur\r\n        ? onBlur\r\n            ? { [onBlurName]: eventWrapper(onBlur, EVENTS.BLUR) }\r\n            : { [onBlurName]: handleBlur }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nconst ErrorMessage = ({ as: InnerComponent, errors, name, children, }) => {\r\n    const methods = useFormContext();\r\n    const { message, types } = get(errors || methods.errors, name, {});\r\n    if (!message) {\r\n        return null;\r\n    }\r\n    const props = {\r\n        children: children ? children({ message, messages: types }) : message,\r\n    };\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}